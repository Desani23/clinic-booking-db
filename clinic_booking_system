-- Switch to your database (optional, if not already selected)
-- USE your_database_name;

-- -----------------------------------------------------
-- Table `Roles`
-- Defines different user roles within the system.
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `Roles` (
  `role_id` INT NOT NULL AUTO_INCREMENT,
  `role_name` VARCHAR(50) NOT NULL,
  PRIMARY KEY (`role_id`),
  UNIQUE INDEX `role_name_UNIQUE` (`role_name` ASC) VISIBLE)
ENGINE = InnoDB
COMMENT = 'Defines user roles like Admin, Doctor, Staff, Patient.';


-- -----------------------------------------------------
-- Table `Specializations`
-- Stores medical specializations for doctors.
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `Specializations` (
  `specialization_id` INT NOT NULL AUTO_INCREMENT,
  `specialization_name` VARCHAR(100) NOT NULL,
  PRIMARY KEY (`specialization_id`),
  UNIQUE INDEX `specialization_name_UNIQUE` (`specialization_name` ASC) VISIBLE)
ENGINE = InnoDB
COMMENT = 'Stores medical specializations for doctors.';


-- -----------------------------------------------------
-- Table `Clinics`
-- Information about different clinic locations, if applicable.
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `Clinics` (
  `clinic_id` INT NOT NULL AUTO_INCREMENT,
  `clinic_name` VARCHAR(150) NOT NULL,
  `address` VARCHAR(255) NULL,
  `phone_number` VARCHAR(20) NULL,
  `email` VARCHAR(100) NULL,
  `operating_hours` VARCHAR(255) NULL COMMENT 'e.g., Mon-Fri 9AM-5PM',
  PRIMARY KEY (`clinic_id`))
ENGINE = InnoDB
COMMENT = 'Information about different clinic locations.';


-- -----------------------------------------------------
-- Table `Services`
-- Defines the medical services offered by the clinic.
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `Services` (
  `service_id` INT NOT NULL AUTO_INCREMENT,
  `service_name` VARCHAR(150) NOT NULL,
  `description` TEXT NULL,
  `base_price` DECIMAL(10,2) NOT NULL DEFAULT 0.00,
  `duration_minutes` INT NULL COMMENT 'Typical duration for the service',
  PRIMARY KEY (`service_id`))
ENGINE = InnoDB
COMMENT = 'Defines medical services offered by the clinic.';


-- -----------------------------------------------------
-- Table `Insurance_Companies`
-- Stores information about insurance companies.
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `Insurance_Companies` (
  `company_id` INT NOT NULL AUTO_INCREMENT,
  `company_name` VARCHAR(150) NOT NULL,
  `contact_phone` VARCHAR(20) NULL,
  `address` VARCHAR(255) NULL,
  `email` VARCHAR(100) NULL,
  PRIMARY KEY (`company_id`),
  UNIQUE INDEX `company_name_UNIQUE` (`company_name` ASC) VISIBLE)
ENGINE = InnoDB
COMMENT = 'Stores information about insurance companies.';


-- -----------------------------------------------------
-- Table `Diagnosis_Codes`
-- Reference table for standardized diagnosis codes (e.g., ICD-10).
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `Diagnosis_Codes` (
  `diagnosis_code_id` INT NOT NULL AUTO_INCREMENT,
  `code` VARCHAR(20) NOT NULL COMMENT 'e.g., A01.0 for Typhoid fever',
  `description` TEXT NOT NULL,
  `category` VARCHAR(100) NULL COMMENT 'e.g., Infectious diseases',
  PRIMARY KEY (`diagnosis_code_id`),
  UNIQUE INDEX `code_UNIQUE` (`code` ASC) VISIBLE)
ENGINE = InnoDB
COMMENT = 'Reference table for standardized diagnosis codes.';


-- -----------------------------------------------------
-- Table `Users`
-- Manages user accounts for system access.
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `Users` (
  `user_id` INT NOT NULL AUTO_INCREMENT,
  `username` VARCHAR(50) NOT NULL,
  `password_hash` VARCHAR(255) NOT NULL COMMENT 'Store hashed passwords only',
  `email` VARCHAR(100) NOT NULL,
  `role_id` INT NOT NULL,
  `is_active` BOOLEAN NOT NULL DEFAULT TRUE,
  `created_at` TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP,
  `updated_at` TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
  PRIMARY KEY (`user_id`),
  UNIQUE INDEX `username_UNIQUE` (`username` ASC) VISIBLE,
  UNIQUE INDEX `email_UNIQUE` (`email` ASC) VISIBLE,
  INDEX `fk_Users_Roles_idx` (`role_id` ASC) VISIBLE,
  CONSTRAINT `fk_Users_Roles`
    FOREIGN KEY (`role_id`)
    REFERENCES `Roles` (`role_id`)
    ON DELETE RESTRICT
    ON UPDATE CASCADE)
ENGINE = InnoDB
COMMENT = 'Manages user accounts for system access.';


-- -----------------------------------------------------
-- Table `Patients`
-- Stores patient demographic and contact information.
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `Patients` (
  `patient_id` INT NOT NULL AUTO_INCREMENT,
  `user_id` INT NULL COMMENT 'Link to Users table if patient has system access',
  `first_name` VARCHAR(100) NOT NULL,
  `last_name` VARCHAR(100) NOT NULL,
  `date_of_birth` DATE NOT NULL,
  `gender` ENUM('Male', 'Female', 'Other') NULL,
  `address` VARCHAR(255) NULL,
  `phone_number` VARCHAR(20) NULL,
  `email` VARCHAR(100) NULL COMMENT 'Patient personal email, can differ from user email',
  `emergency_contact_name` VARCHAR(150) NULL,
  `emergency_contact_phone` VARCHAR(20) NULL,
  `blood_group` VARCHAR(5) NULL,
  `registration_date` TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP,
  PRIMARY KEY (`patient_id`),
  UNIQUE INDEX `user_id_UNIQUE` (`user_id` ASC) VISIBLE,
  UNIQUE INDEX `phone_number_UNIQUE` (`phone_number` ASC) VISIBLE,
  UNIQUE INDEX `email_UNIQUE_patient` (`email` ASC) VISIBLE,
  CONSTRAINT `fk_Patients_Users`
    FOREIGN KEY (`user_id`)
    REFERENCES `Users` (`user_id`)
    ON DELETE SET NULL
    ON UPDATE CASCADE)
ENGINE = InnoDB
COMMENT = 'Stores patient demographic and contact information.';


-- -----------------------------------------------------
-- Table `Doctors`
-- Stores information about doctors.
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `Doctors` (
  `doctor_id` INT NOT NULL AUTO_INCREMENT,
  `user_id` INT NOT NULL COMMENT 'Doctors must have a user account',
  `first_name` VARCHAR(100) NOT NULL,
  `last_name` VARCHAR(100) NOT NULL,
  `specialization_id` INT NOT NULL,
  `clinic_id` INT NULL COMMENT 'Primary clinic association',
  `phone_number` VARCHAR(20) NULL,
  `email` VARCHAR(100) NOT NULL COMMENT 'Professional email, usually same as user email',
  `license_number` VARCHAR(50) NOT NULL,
  `years_of_experience` INT NULL DEFAULT 0,
  `biography` TEXT NULL,
  PRIMARY KEY (`doctor_id`),
  UNIQUE INDEX `user_id_UNIQUE` (`user_id` ASC) VISIBLE,
  UNIQUE INDEX `license_number_UNIQUE` (`license_number` ASC) VISIBLE,
  INDEX `fk_Doctors_Specializations_idx` (`specialization_id` ASC) VISIBLE,
  INDEX `fk_Doctors_Clinics_idx` (`clinic_id` ASC) VISIBLE,
  UNIQUE INDEX `email_UNIQUE_doctor` (`email` ASC) VISIBLE,
  CONSTRAINT `fk_Doctors_Users`
    FOREIGN KEY (`user_id`)
    REFERENCES `Users` (`user_id`)
    ON DELETE RESTRICT
    ON UPDATE CASCADE,
  CONSTRAINT `fk_Doctors_Specializations`
    FOREIGN KEY (`specialization_id`)
    REFERENCES `Specializations` (`specialization_id`)
    ON DELETE RESTRICT
    ON UPDATE CASCADE,
  CONSTRAINT `fk_Doctors_Clinics`
    FOREIGN KEY (`clinic_id`)
    REFERENCES `Clinics` (`clinic_id`)
    ON DELETE SET NULL
    ON UPDATE CASCADE)
ENGINE = InnoDB
COMMENT = 'Stores information about doctors.';


-- -----------------------------------------------------
-- Table `Staff`
-- Stores information about non-doctor staff members.
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `Staff` (
  `staff_id` INT NOT NULL AUTO_INCREMENT,
  `user_id` INT NOT NULL COMMENT 'Staff must have a user account',
  `first_name` VARCHAR(100) NOT NULL,
  `last_name` VARCHAR(100) NOT NULL,
  `clinic_id` INT NULL COMMENT 'Primary clinic association',
  `job_title` VARCHAR(100) NOT NULL COMMENT 'e.g., Nurse, Receptionist, Lab Technician',
  `phone_number` VARCHAR(20) NULL,
  `email` VARCHAR(100) NOT NULL COMMENT 'Professional email, usually same as user email',
  `hire_date` DATE NULL,
  `is_medical_staff` BOOLEAN NOT NULL DEFAULT FALSE COMMENT 'e.g. Nurse, Technician vs Admin staff',
  PRIMARY KEY (`staff_id`),
  UNIQUE INDEX `user_id_UNIQUE` (`user_id` ASC) VISIBLE,
  INDEX `fk_Staff_Clinics_idx` (`clinic_id` ASC) VISIBLE,
  UNIQUE INDEX `email_UNIQUE_staff` (`email` ASC) VISIBLE,
  CONSTRAINT `fk_Staff_Users`
    FOREIGN KEY (`user_id`)
    REFERENCES `Users` (`user_id`)
    ON DELETE RESTRICT
    ON UPDATE CASCADE,
  CONSTRAINT `fk_Staff_Clinics`
    FOREIGN KEY (`clinic_id`)
    REFERENCES `Clinics` (`clinic_id`)
    ON DELETE SET NULL
    ON UPDATE CASCADE)
ENGINE = InnoDB
COMMENT = 'Stores information about non-doctor staff members.';


-- -----------------------------------------------------
-- Table `Doctor_Schedules`
-- Defines the general availability of doctors.
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `Doctor_Schedules` (
  `schedule_id` INT NOT NULL AUTO_INCREMENT,
  `doctor_id` INT NOT NULL,
  `clinic_id` INT NOT NULL,
  `day_of_week` ENUM('Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday', 'Sunday') NOT NULL,
  `start_time` TIME NOT NULL,
  `end_time` TIME NOT NULL,
  `slot_duration_minutes` INT NOT NULL DEFAULT 30 COMMENT 'Default duration for appointments in this schedule',
  `effective_start_date` DATE NOT NULL,
  `effective_end_date` DATE NULL COMMENT 'Null if ongoing',
  PRIMARY KEY (`schedule_id`),
  INDEX `fk_DoctorSchedules_Doctors_idx` (`doctor_id` ASC) VISIBLE,
  INDEX `fk_DoctorSchedules_Clinics_idx` (`clinic_id` ASC) VISIBLE,
  UNIQUE INDEX `uq_doctor_schedule_day_time` (`doctor_id` ASC, `clinic_id` ASC, `day_of_week` ASC, `start_time` ASC, `effective_start_date` ASC) VISIBLE,
  CONSTRAINT `fk_DoctorSchedules_Doctors`
    FOREIGN KEY (`doctor_id`)
    REFERENCES `Doctors` (`doctor_id`)
    ON DELETE CASCADE -- If doctor is removed, their schedules are removed
    ON UPDATE CASCADE,
  CONSTRAINT `fk_DoctorSchedules_Clinics`
    FOREIGN KEY (`clinic_id`)
    REFERENCES `Clinics` (`clinic_id`)
    ON DELETE CASCADE -- If clinic is removed, related schedules are removed
    ON UPDATE CASCADE,
  CONSTRAINT `chk_schedule_times` CHECK (`end_time` > `start_time`),
  CONSTRAINT `chk_effective_dates` CHECK (`effective_end_date` IS NULL OR `effective_end_date` >= `effective_start_date`)
 )
ENGINE = InnoDB
COMMENT = 'Defines the general availability of doctors.';


-- -----------------------------------------------------
-- Table `Patient_Insurance_Plans`
-- Links patients to their insurance plans.
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `Patient_Insurance_Plans` (
  `patient_insurance_id` INT NOT NULL AUTO_INCREMENT,
  `patient_id` INT NOT NULL,
  `company_id` INT NOT NULL,
  `policy_number` VARCHAR(100) NOT NULL,
  `group_number` VARCHAR(100) NULL,
  `subscriber_name` VARCHAR(200) NULL,
  `effective_date` DATE NOT NULL,
  `expiry_date` DATE NULL,
  `is_primary` BOOLEAN NOT NULL DEFAULT TRUE,
  PRIMARY KEY (`patient_insurance_id`),
  INDEX `fk_PatientInsurance_Patients_idx` (`patient_id` ASC) VISIBLE,
  INDEX `fk_PatientInsurance_Companies_idx` (`company_id` ASC) VISIBLE,
  UNIQUE INDEX `uq_patient_policy` (`patient_id` ASC, `company_id` ASC, `policy_number` ASC) VISIBLE,
  CONSTRAINT `fk_PatientInsurance_Patients`
    FOREIGN KEY (`patient_id`)
    REFERENCES `Patients` (`patient_id`)
    ON DELETE CASCADE -- If patient is removed, their insurance info is removed
    ON UPDATE CASCADE,
  CONSTRAINT `fk_PatientInsurance_Companies`
    FOREIGN KEY (`company_id`)
    REFERENCES `Insurance_Companies` (`company_id`)
    ON DELETE RESTRICT
    ON UPDATE CASCADE)
ENGINE = InnoDB
COMMENT = 'Links patients to their insurance plans.';


-- -----------------------------------------------------
-- Table `Appointments`
-- Manages appointment bookings.
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `Appointments` (
  `appointment_id` INT NOT NULL AUTO_INCREMENT,
  `patient_id` INT NOT NULL,
  `doctor_id` INT NOT NULL,
  `clinic_id` INT NOT NULL,
  `schedule_id` INT NULL COMMENT 'Optional: Link to a specific doctor schedule entry',
  `appointment_datetime` DATETIME NOT NULL,
  `duration_minutes` INT NOT NULL DEFAULT 30,
  `reason_for_visit` TEXT NULL,
  `status` ENUM('Scheduled', 'Confirmed', 'Completed', 'Cancelled_Patient', 'Cancelled_Clinic', 'No_Show', 'Rescheduled') NOT NULL DEFAULT 'Scheduled',
  `notes` TEXT NULL COMMENT 'Internal notes about the appointment',
  `booked_by_user_id` INT NULL COMMENT 'User who booked the appointment',
  `booked_at` TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP,
  `check_in_time` DATETIME NULL,
  `check_out_time` DATETIME NULL,
  PRIMARY KEY (`appointment_id`),
  INDEX `fk_Appointments_Patients_idx` (`patient_id` ASC) VISIBLE,
  INDEX `fk_Appointments_Doctors_idx` (`doctor_id` ASC) VISIBLE,
  INDEX `fk_Appointments_Clinics_idx` (`clinic_id` ASC) VISIBLE,
  INDEX `fk_Appointments_DoctorSchedules_idx` (`schedule_id` ASC) VISIBLE,
  INDEX `fk_Appointments_BookedByUser_idx` (`booked_by_user_id` ASC) VISIBLE,
  UNIQUE INDEX `uq_doctor_time_slot` (`doctor_id` ASC, `appointment_datetime` ASC) VISIBLE COMMENT 'Prevents double booking for a doctor at the exact same time',
  CONSTRAINT `fk_Appointments_Patients`
    FOREIGN KEY (`patient_id`)
    REFERENCES `Patients` (`patient_id`)
    ON DELETE RESTRICT
    ON UPDATE CASCADE,
  CONSTRAINT `fk_Appointments_Doctors`
    FOREIGN KEY (`doctor_id`)
    REFERENCES `Doctors` (`doctor_id`)
    ON DELETE RESTRICT
    ON UPDATE CASCADE,
  CONSTRAINT `fk_Appointments_Clinics`
    FOREIGN KEY (`clinic_id`)
    REFERENCES `Clinics` (`clinic_id`)
    ON DELETE RESTRICT
    ON UPDATE CASCADE,
  CONSTRAINT `fk_Appointments_DoctorSchedules`
    FOREIGN KEY (`schedule_id`)
    REFERENCES `Doctor_Schedules` (`schedule_id`)
    ON DELETE SET NULL
    ON UPDATE CASCADE,
  CONSTRAINT `fk_Appointments_BookedByUser`
    FOREIGN KEY (`booked_by_user_id`)
    REFERENCES `Users` (`user_id`)
    ON DELETE SET NULL
    ON UPDATE CASCADE)
ENGINE = InnoDB
COMMENT = 'Manages appointment bookings.';


-- -----------------------------------------------------
-- Table `Appointment_Services`
-- Junction table for many-to-many relationship between Appointments and Services.
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `Appointment_Services` (
  `appointment_service_id` INT NOT NULL AUTO_INCREMENT,
  `appointment_id` INT NOT NULL,
  `service_id` INT NOT NULL,
  `quantity` INT NOT NULL DEFAULT 1,
  `price_at_time_of_service` DECIMAL(10,2) NOT NULL COMMENT 'Captures price when service was booked/rendered',
  PRIMARY KEY (`appointment_service_id`),
  INDEX `fk_AppServices_Appointments_idx` (`appointment_id` ASC) VISIBLE,
  INDEX `fk_AppServices_Services_idx` (`service_id` ASC) VISIBLE,
  UNIQUE INDEX `uq_appointment_service` (`appointment_id` ASC, `service_id` ASC) VISIBLE,
  CONSTRAINT `fk_AppServices_Appointments`
    FOREIGN KEY (`appointment_id`)
    REFERENCES `Appointments` (`appointment_id`)
    ON DELETE CASCADE -- If appointment is deleted, its services are removed
    ON UPDATE CASCADE,
  CONSTRAINT `fk_AppServices_Services`
    FOREIGN KEY (`service_id`)
    REFERENCES `Services` (`service_id`)
    ON DELETE RESTRICT
    ON UPDATE CASCADE)
ENGINE = InnoDB
COMMENT = 'Junction table for Appointments and Services.';


-- -----------------------------------------------------
-- Table `Medical_Records`
-- Stores patient medical history and consultation details.
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `Medical_Records` (
  `record_id` INT NOT NULL AUTO_INCREMENT,
  `patient_id` INT NOT NULL,
  `doctor_id` INT NOT NULL COMMENT 'Doctor primarily responsible for this record entry',
  `appointment_id` INT NULL COMMENT 'Link to specific appointment if record is related to one',
  `record_date` DATETIME NOT NULL DEFAULT CURRENT_TIMESTAMP,
  `chief_complaint` TEXT NULL,
  `present_illness_history` TEXT NULL,
  `physical_examination` TEXT NULL,
  `treatment_plan` TEXT NULL,
  `follow_up_instructions` TEXT NULL,
  `created_at` TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP,
  `updated_at` TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
  PRIMARY KEY (`record_id`),
  INDEX `fk_MedicalRecords_Patients_idx` (`patient_id` ASC) VISIBLE,
  INDEX `fk_MedicalRecords_Doctors_idx` (`doctor_id` ASC) VISIBLE,
  INDEX `fk_MedicalRecords_Appointments_idx` (`appointment_id` ASC) VISIBLE,
  UNIQUE INDEX `appointment_id_UNIQUE_medical_record` (`appointment_id` ASC) VISIBLE COMMENT 'Typically one main record per appointment',
  CONSTRAINT `fk_MedicalRecords_Patients`
    FOREIGN KEY (`patient_id`)
    REFERENCES `Patients` (`patient_id`)
    ON DELETE RESTRICT 
    ON UPDATE CASCADE,
  CONSTRAINT `fk_MedicalRecords_Doctors`
    FOREIGN KEY (`doctor_id`)
    REFERENCES `Doctors` (`doctor_id`)
    ON DELETE RESTRICT
    ON UPDATE CASCADE,
  CONSTRAINT `fk_MedicalRecords_Appointments`
    FOREIGN KEY (`appointment_id`)
    REFERENCES `Appointments` (`appointment_id`)
    ON DELETE SET NULL -- If appointment deleted, record might still exist orphan or be handled
    ON UPDATE CASCADE)
ENGINE = InnoDB
COMMENT = 'Stores patient medical history and consultation details.';


-- -----------------------------------------------------
-- Table `Patient_Diagnoses`
-- Links medical records to specific diagnoses using standardized codes.
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `Patient_Diagnoses` (
  `patient_diagnosis_id` INT NOT NULL AUTO_INCREMENT,
  `record_id` INT NOT NULL,
  `diagnosis_code_id` INT NOT NULL,
  `diagnosing_doctor_id` INT NOT NULL,
  `diagnosis_date` DATE NOT NULL,
  `type` ENUM('Primary', 'Secondary', 'Provisional', 'Differential') NOT NULL DEFAULT 'Primary',
  `onset_date` DATE NULL,
  `notes` TEXT NULL,
  PRIMARY KEY (`patient_diagnosis_id`),
  INDEX `fk_PatientDiagnoses_Records_idx` (`record_id` ASC) VISIBLE,
  INDEX `fk_PatientDiagnoses_Codes_idx` (`diagnosis_code_id` ASC) VISIBLE,
  INDEX `fk_PatientDiagnoses_Doctors_idx` (`diagnosing_doctor_id` ASC) VISIBLE,
  UNIQUE INDEX `uq_record_diagnosis_code` (`record_id` ASC, `diagnosis_code_id` ASC) VISIBLE,
  CONSTRAINT `fk_PatientDiagnoses_MedicalRecords`
    FOREIGN KEY (`record_id`)
    REFERENCES `Medical_Records` (`record_id`)
    ON DELETE CASCADE -- If medical record entry is deleted, its diagnoses are removed
    ON UPDATE CASCADE,
  CONSTRAINT `fk_PatientDiagnoses_DiagnosisCodes`
    FOREIGN KEY (`diagnosis_code_id`)
    REFERENCES `Diagnosis_Codes` (`diagnosis_code_id`)
    ON DELETE RESTRICT
    ON UPDATE CASCADE,
  CONSTRAINT `fk_PatientDiagnoses_Doctors`
    FOREIGN KEY (`diagnosing_doctor_id`)
    REFERENCES `Doctors` (`doctor_id`)
    ON DELETE RESTRICT
    ON UPDATE CASCADE)
ENGINE = InnoDB
COMMENT = 'Links medical records to specific diagnoses.';


-- -----------------------------------------------------
-- Table `Billing`
-- Manages billing information for patients.
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `Billing` (
  `bill_id` INT NOT NULL AUTO_INCREMENT,
  `patient_id` INT NOT NULL,
  `appointment_id` INT NULL COMMENT 'Link to appointment if bill is for a specific one',
  `bill_date` DATE NOT NULL,
  `due_date` DATE NULL,
  `total_amount` DECIMAL(10,2) NOT NULL DEFAULT 0.00,
  `amount_paid` DECIMAL(10,2) NOT NULL DEFAULT 0.00,
  `insurance_claim_id` VARCHAR(100) NULL,
  `payment_status` ENUM('Unpaid', 'Partially_Paid', 'Paid', 'Overdue', 'Sent_To_Insurance', 'Insurance_Paid', 'Insurance_Denied', 'Write_Off') NOT NULL DEFAULT 'Unpaid',
  `notes` TEXT NULL,
  `created_by_user_id` INT NULL,
  `created_at` TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP,
  `updated_at` TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
  PRIMARY KEY (`bill_id`),
  INDEX `fk_Billing_Patients_idx` (`patient_id` ASC) VISIBLE,
  INDEX `fk_Billing_Appointments_idx` (`appointment_id` ASC) VISIBLE,
  INDEX `fk_Billing_CreatedByUser_idx` (`created_by_user_id` ASC) VISIBLE,
  CONSTRAINT `fk_Billing_Patients`
    FOREIGN KEY (`patient_id`)
    REFERENCES `Patients` (`patient_id`)
    ON DELETE RESTRICT
    ON UPDATE CASCADE,
  CONSTRAINT `fk_Billing_Appointments`
    FOREIGN KEY (`appointment_id`)
    REFERENCES `Appointments` (`appointment_id`)
    ON DELETE SET NULL 
    ON UPDATE CASCADE,
  CONSTRAINT `fk_Billing_CreatedByUser`
    FOREIGN KEY (`created_by_user_id`)
    REFERENCES `Users` (`user_id`)
    ON DELETE SET NULL
    ON UPDATE CASCADE,
  CONSTRAINT `chk_billing_amounts` CHECK (`amount_paid` <= `total_amount`)
  )
ENGINE = InnoDB
COMMENT = 'Manages billing information for patients.';


-- -----------------------------------------------------
-- Table `Bill_Items`
-- Itemizes individual charges on a bill.
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `Bill_Items` (
  `bill_item_id` INT NOT NULL AUTO_INCREMENT,
  `bill_id` INT NOT NULL,
  `service_id` INT NULL COMMENT 'Link to a predefined service if applicable',
  `item_description` VARCHAR(255) NOT NULL COMMENT 'Description of the charge, can be service name or custom',
  `quantity` INT NOT NULL DEFAULT 1,
  `unit_price` DECIMAL(10,2) NOT NULL,
  `total_price` DECIMAL(10,2) NOT NULL COMMENT 'Should be quantity * unit_price',
  PRIMARY KEY (`bill_item_id`),
  INDEX `fk_BillItems_Billing_idx` (`bill_id` ASC) VISIBLE,
  INDEX `fk_BillItems_Services_idx` (`service_id` ASC) VISIBLE,
  CONSTRAINT `fk_BillItems_Billing`
    FOREIGN KEY (`bill_id`)
    REFERENCES `Billing` (`bill_id`)
    ON DELETE CASCADE -- If bill is deleted, its items are deleted
    ON UPDATE CASCADE,
  CONSTRAINT `fk_BillItems_Services`
    FOREIGN KEY (`service_id`)
    REFERENCES `Services` (`service_id`)
    ON DELETE SET NULL -- Item might remain even if service definition changes or is removed
    ON UPDATE CASCADE)
ENGINE = InnoDB
COMMENT = 'Itemizes individual charges on a bill.';